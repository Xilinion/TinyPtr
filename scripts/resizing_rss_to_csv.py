import os
import re
import csv
import math
from typing import List, Tuple

# Expect config_py.py to be generated by scripts/to_csv.sh
try:
    import config_py  # type: ignore
except Exception as e:
    raise SystemExit("config_py.py not found. Run scripts/to_csv.sh first to generate it.")


def parse_resizing_file(path: str) -> Tuple[List[float], List[float]]:
    """Parse a resizing case 27 file and return lists of completion percentages and memory usage (MB)."""
    completion_percents: List[float] = []
    memory_mb: List[float] = []

    with open(path, "r") as f:
        in_measurements = False
        for line in f:
            line = line.strip()
            if not line:
                continue
            
            # Look for the start of measurements section
            if line == "Memory Usage Measurements:":
                in_measurements = True
                continue
            
            # Skip header line
            if in_measurements and line.startswith("Completion %"):
                continue
            
            # Skip efficiency metrics section
            if in_measurements and line == "Memory Efficiency Metrics:":
                break
            
            # Parse measurement lines
            if in_measurements and "," in line:
                try:
                    parts = line.split(",")
                    if len(parts) >= 2:
                        completion = float(parts[0].strip())
                        memory = float(parts[1].strip())
                        completion_percents.append(completion)
                        memory_mb.append(memory)
                except ValueError:
                    continue

    return completion_percents, memory_mb


def find_object_id(filename: str) -> int:
    m = re.search(r"object_(\d+)_case_27_entry_(\d+)_\.txt", filename)
    if not m:
        raise ValueError(f"Filename not recognized: {filename}")
    return int(m.group(1))


def main() -> None:
    base_dir = config_py.RESULTS_DIR
    out_dir = config_py.CSV_OUTPUT_DIR
    os.makedirs(out_dir, exist_ok=True)

    # Use resize settings from scripts/benchmark.sh
    # resize_object_ids=(6 7 15 18 21 24), case_id=27, entry_id=10000
    object_ids = [6, 7, 15, 18, 21, 24]
    case_id = 27
    entry_id = 10000

    rows_written = 0
    output_csv = os.path.join(out_dir, "resizing_rss.csv")
    with open(output_csv, "w", newline="") as f:
        w = csv.writer(f)
        w.writerow(["object_id", "completion", "memory_mb"])

        for obj in object_ids:
            file_name = f"object_{obj}_case_{case_id}_entry_{entry_id}_.txt"
            path = os.path.join(base_dir, file_name)
            if not os.path.exists(path):
                print(f"Warning: missing {file_name}")
                continue

            completion_percents, memory_mb = parse_resizing_file(path)
            if not completion_percents:
                print(f"Warning: no parsable lines in {file_name}")
                continue

            # Use only the first 51 points
            completion_percents = completion_percents[:51]
            memory_mb = memory_mb[:51]

            # Use completion percentages directly
            for completion, memory in zip(completion_percents, memory_mb):
                w.writerow([obj, f"{completion:.2f}", f"{memory:.6f}"])
                rows_written += 1

    if rows_written == 0:
        print("Warning: resizing_rss.csv contains no data rows. Verify benchmark.sh and results directory.")
    print(f"Created {output_csv}")


if __name__ == "__main__":
    main()
